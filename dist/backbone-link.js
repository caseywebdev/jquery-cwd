// Generated by CoffeeScript 1.4.0
(function() {

  $.extend($.fn, {
    backboneLink: function(options) {
      var attr, model, save;
      if (options == null) {
        options = {};
      }
      model = options.model, attr = options.attr, save = options.save;
      if (save == null) {
        save = true;
      }
      return $(this).each(function() {
        var check;
        check = $(this).find('[data-backbone-link-attr]');
        return (check.length ? check : $(this)).each(function() {
          var $t, checkbox;
          $t = $(this);
          $t.backboneUnlink();
          $t.data({
            backboneLinkModel: model
          });
          checkbox = $t.is(':checkbox');
          $t.data({
            backboneLinkInputChange: function() {
              var attributes, newVal, oldVal;
              oldVal = model.get(attr);
              newVal = checkbox ? $t.prop('checked') : $t.val() || null;
              if (newVal !== oldVal) {
                (attributes = {})[attr] = newVal;
                return model[save ? 'save' : 'set'](attributes, {
                  wait: true,
                  attr: attr
                });
              }
            }
          });
          $t.data({
            backboneLinkModelChange: function() {
              var newVal, oldVal, valOrText;
              valOrText = $t.is(':input') ? 'val' : 'text';
              oldVal = checkbox ? $t.prop('checked') : $t[valOrText]();
              newVal = model.get(attr);
              newVal = newVal === null ? '' : newVal;
              if (newVal !== oldVal) {
                if (checkbox) {
                  return $t.prop({
                    checked: !!newVal
                  });
                } else {
                  return $t[valOrText](newVal);
                }
              }
            }
          });
          if ($t.is(':input')) {
            $t.on('change', $t.data().backboneLinkInputChange);
          }
          model.on("change:" + attr, $t.data().backboneLinkModelChange);
          return $t.data().backboneLinkModelChange();
        });
      });
    },
    backboneUnlink: function() {
      return $(this).each(function() {
        var $t, model;
        $t = $(this);
        model = $t.data().backboneLinkModel;
        if (model) {
          $t.off('change', $t.data().backboneLinkInputChange);
          return model.off(null, $t.data().backboneLinkModelChange);
        }
      });
    }
  });

}).call(this);
